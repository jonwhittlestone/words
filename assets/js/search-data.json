{
  
    
        "post0": {
            "title": "Scheduled Severless Startup",
            "content": "The Problem . As part of the Covid-19 effort, Digital Ocean donated some free credit to us to work on a local food delivery scheme. . To make that credit go as far as possible and to minimise power consumption, we&#39;d like to power up and down the servers according to a schedule. . The Solution . Esimated cost saving... . Here&#39;s how to do that with AWS Lambda, with cloudfront events. We iterate on that to use the Serverless Framework. . Prerequisites . To follow along, there is a bit of set up involved to launch a Droplet that you can inspect with SSH if you need. . You could always just check the companion repo. . You will need to: . .. have jq installed to format JSON responses Download JQ for your OS | . | . .. generate an access token so you can use the Digital Ocean API. | . .. add the access token to your environment . $ export DIGITAL_OCEAN_ACCESS_TOKEN=[your_digital_ocean_token] . | .. have a running Digital Ocean Droplet with Docker installed. . If you need to create one, use the following API operation. . $ curl -X POST -H &#39;Content-Type: application/json&#39; -H &#39;Authorization: Bearer &#39;$DIGITAL_OCEAN_ACCESS_TOKEN&#39;&#39; -d &#39;{&quot;name&quot;:&quot;scheduled-serverless&quot;,&quot;region&quot;:&quot;lon1&quot;,&quot;size&quot;:&quot;s-2vcpu-4gb&quot;,&quot;image&quot;:&quot;docker-18-04&quot;}&#39; &quot;https://api.digitalocean.com/v2/droplets&quot; . | .. generate and add the private key to your droplet. When generating, Select: RSA and 4096 and leave Passphrase blank. You may use the following API operation. . | .. add the public key to your environment . | . | . Shutdown a Droplet with CURL . Assuming, your account only has one Digital Ocean droplet, the following CURL statement shows active status and the ID . $ curl -H &#39;Content-Type: application/json&#39; -H &#39;Authorization: Bearer &#39;$DIGITAL_OCEAN_ACCESS_TOKEN&#39;&#39; &quot;https://api.digitalocean.com/v2/droplets?name=scheduled-serverless&quot; | jq &#39;.droplets[0].status, .droplets[1].id&#39; % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 4137 0 4137 0 0 7925 0 --:--:-- --:--:-- --:--:-- 7940 &quot;active&quot; 194534673 . Issuing the following CURL will shut it down. . curl -X POST -H &#39;Content-Type: application/json&#39; -H &#39;Authorization: Bearer &#39;$DIGITAL_OCEAN_ACCESS_TOKEN&#39;&#39; -d &#39;{&quot;type&quot;:&quot;shutdown&quot;}&#39; &quot;https://api.digitalocean.com/v2/droplets/194534673/actions&quot; . We can then verify the droplet has been powered down by reissuing the previous command from above. to show the &#39;active&#39; status. . ... &quot;off&quot; 194534673 . Power on a Droplet with CURL . The action for powering on follows the same convention. . $ curl -X POST -H &#39;Content-Type: application/json&#39; -H &#39;Authorization: Bearer &#39;$DIGITAL_OCEAN_ACCESS_TOKEN&#39;&#39; -d &#39;{&quot;type&quot;:&quot;power_on&quot;}&#39; &quot;https://api.digitalocean.com/v2/droplets/194534673/actions&quot; . We can check the machine has been powered down: . $ curl -H &#39;Content-Type: application/json&#39; -H &#39;Authorization: Bearer &#39;$DIGITAL_OCEAN_ACCESS_TOKEN&#39;&#39; &quot;https://api.digitalocean.com/v2/droplets?name=scheduled-serverless&quot; | jq &#39;.droplets[] | {id:.id, name:.name,status: .status}&#39; . Requests scripts in AWS Lambda . First lets translate these CURL statements into Python. . import requests headers = { &#39;Content-Type&#39;: &#39;application/json&#39;, # &#39;Authorization&#39;: &#39;Bearer $DIGITAL_OCEAN_ACCESS_TOKEN&#39;, &#39;Authorization&#39;: &#39;Bearer XXX&#39;, } params = ( (&#39;page&#39;, &#39;1&#39;), (&#39;per_page&#39;, &#39;100&#39;), ) response = requests.get(&#39;https://api.digitalocean.com/v2/droplets&#39;, headers=headers, params=params) #data = &#39;{&quot;type&quot;:&quot;shutdown&quot;}&#39; #response = requests.post(&#39;https://api.digitalocean.com/v2/droplets/194534673/actions&#39;, headers=headers, data=data) print(response) . &lt;Response [401]&gt; . Schedule the scripts with Cloudwatch events . Serverless framework . Team notifications with Slack . As part of what&#39;s become known as &#39;Chatops&#39;, it&#39;s useful to update team members and stakeholders about the status of the server. . There are a variety of messaging platforms that have APIs such as Telegram or even SMS, but Slack has become one of the most popular. .",
            "url": "https://words.howapped.com/aws%20lambda/automation/python/2020/06/01/scheduled-serverless-startup.html",
            "relUrl": "/aws%20lambda/automation/python/2020/06/01/scheduled-serverless-startup.html",
            "date": " • Jun 1, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Automatically restart docker containers after reboot",
            "content": "The Problem . As part of Covid-19 relief, DigitalOcean donated some free credit for me to work on a local food delivery scheme. . I need to get most value for money by making that credit go as far as possible. A solution would present another advantage in minimising power consumption. . The Solution . The server should be powered-down outside of operating hours and turned back on before start of business. This can be done using the cloud provider&#39;s control panel. . To avoid manual work to start the web app, a service is needed to bring the containers back online when the droplet is swtiched on. . Covered in this article is the process for using the DigitalOcean API to create a droplet with the requisite user_data for creating the systemd service to start containers at boot time. . TLDR; Have a look at the companion repo.. It contains an example dockerized web app and the shell scripts for starting containers and creating the service. . Not covered in this article is the process to automate the power down and up to a schedule. This is covered in a subsequent article. . Prerequisites . A Digital Ocean account (free trial available) | Generate an access token for accessing the DigitalOcean API | Add the token to your environment . $ export DIGITAL_OCEAN_ACCESS_TOKEN=XXXXXXXX . | jq installed to format JSON responses Download JQ for your OS | . | . Create a DigitalOcean droplet (optional) . If you already have a web server, with an app, move to section, &#39;Create a systemd service.&#39; . If you do not already have a web server, launch a Droplet with requisite SSH access. . CURL to create the droplet . The following CURL statement creates an Ubuntu 18.04 server in London. The user_data key in the payload is used for defining various statements to execute once the server is created. In this case we are cloning the repo containing the dockerized app, starting it, and creating the upstart service to restart the app when the server is restarted. . $ curl -X POST -H &#39;Content-Type: application/json&#39; -H &#39;Authorization: Bearer &#39;$DIGITAL_OCEAN_ACCESS_TOKEN&#39;&#39; -d &#39;{&quot;name&quot;:&quot;scheduled-serverless&quot;,&quot;region&quot;:&quot;lon1&quot;,&quot;size&quot;:&quot;s-2vcpu-4gb&quot;,&quot;image&quot;:&quot;docker-18-04&quot;, &quot;user_data&quot;: &quot;#!/bin/bash apt-get update apt-get upgrade -y git clone https://github.com/jonwhittlestone/scheduled-serverless-startup.git /root/scheduled-serverless-startup sh /root/scheduled-serverless-startup/start-containers.sh sh /root/scheduled-serverless-startup/create-service.sh&quot;}&#39; &quot;https://api.digitalocean.com/v2/droplets&quot; . SSH into your new droplet . You will be emailed your root password. After you SSH in using the provided password, you will be asked to change it. . . Test the web app is running . The app is running with Docker on port 80, so it&#39;s simply a case of: . root@scheduled-serverless:~# curl localhost A Howapped Project. . Test the service is running . Restart your server with . root@scheduled-serverless:~# sudo reboot . And then ssh and repeat the CURL statement to the web service . (base) ➜ ~ ssh root@167.172.56.239 curl localhost root@167.172.56.239&#39;s password: % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 A Howapped Project. 100 22 100 22 0 0 1294 0 --:--:-- --:--:-- --:--:-- 1294 . Create a systemd service . Ubuntu&#39;s init system is called systemd and various flavours of Linux may have differing init systems. . Scripting the starting of the web app . We need to define what should be automated which is starting the containers. . In this case, I have an example dockerized app defined in the companion repo, so let&#39;s clone that. . If this directory is present (because it has been previously cloned), then just update the local repo. . #!/bin/bash if [ -d &quot;/root/scheduled-serverless-startup&quot; ] then git pull origin master else cd /root/scheduled-serverless-startup git clone https://github.com/jonwhittlestone/scheduled-serverless-startup.git /root/scheduled-serverless-startup fi cd /root/scheduled-serverless-startup/app docker-compose up -d . Lastly, we start containers with docker-compose . Using systemctl to enable the service . Using the interface systemctl we can manage the init system. Each service is called a unit file. This means loading a service, enabling at boot and restarting. . On an Ubuntu system, you may inspect the running services: . $ systemctl status | head ● madebyjon State: running Jobs: 0 queued Failed: 0 units Since: Mon 2020-06-08 05:56:42 BST; 1 day 2h ago CGroup: / ├─3770 bpfilter_umh ├─user.slice │ └─user-1000.slice │ ├─user@1000.service . The following shell script creates the unit file, enables it at boot and starts the service. . #!/bin/bash touch /etc/systemd/system/howapped.service cat &gt; /etc/systemd/system/howapped.service&lt;&lt;-EOF [Unit] Description=HowappedProjectStartOnBoot After=network.target [Service] Type=simple User=root WorkingDirectory=/root/scheduled-serverless-startup ExecStart=/bin/sh /root/scheduled-serverless-startup/start-containers.sh Restart=on-abort [Install] WantedBy=multi-user.target EOF systemctl daemon-reload systemctl enable howapped.service systemctl restart howapped.service . Enable the systemd service . The below excerpt verifies we have the working directory created. . root@scheduled-serverless:~/scheduled-serverless-startup# ls README.md app create-service.sh Vagrantfile cloud-config.yaml start-containers.sh root@scheduled-serverless:~/scheduled-serverless-startup# pwd /root/scheduled-serverless-startup . And this runs the shell script to create the unit file and enable it. . root@scheduled-serverless:~/scheduled-serverless-startup# sh create-service.sh Created symlink /etc/systemd/system/multi-user.target.wants/howapped.service → /etc/systemd/system/howapped.service. . Test it . We will use the CURL statement to find the ID of our droplet, so that we can then use a CURL statement to power down the machine. . $ curl -H &#39;Content-Type: application/json&#39; -H &#39;Authorization: Bearer &#39;$DIGITAL_OCEAN_ACCESS_TOKEN&#39;&#39; &quot;https://api.digitalocean.com/v2/droplets?name=scheduled-serverless&quot; | jq &#39;.droplets[] | {id:.id, name:.name, status: .status}&#39; { &quot;id&quot;: 195393249, &quot;name&quot;: &quot;scheduled-serverless&quot;, &quot;status&quot;: &quot;on&quot; } # power it down $ curl -X POST -H &#39;Content-Type: application/json&#39; -H &#39;Authorization: Bearer &#39;$DIGITAL_OCEAN_ACCESS_TOKEN&#39;&#39; -d &#39;{&quot;type&quot;:&quot;power_off&quot;}&#39; &quot;https://api.digitalocean.com/v2/droplets/195393249/actions&quot; | jq &#39;.[] | {id:.id, status:.status, type:.type}&#39; . We power it back up: . $ curl -X POST -H &#39;Content-Type: application/json&#39; -H &#39;Authorization: Bearer &#39;$DIGITAL_OCEAN_ACCESS_TOKEN&#39;&#39; -d &#39;{&quot;type&quot;:&quot;power_on&quot;}&#39; &quot;https://api.digitalocean.com/v2/droplets/195393249/actions&quot; | jq &#39;.[] | {id:.id, status:.status, type:.type}&#39; { &quot;id&quot;: 953153688, &quot;status&quot;: &quot;in-progress&quot;, &quot;type&quot;: &quot;power_on&quot; } . And verify our app is running. . $ ssh root@104.248.174.117 curl localhost root@104.248.174.117&#39;s password: % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 A Howapped Project. . Clean up . If you were following along by creating a DigitalOcean droplet, you may wish to power down or destroy the machine if not in use. . . Resources . Linode - Introduction to Systemctl | .",
            "url": "https://words.howapped.com/systemd/automation/2020/06/01/automatically-restart-docker-after-reboot-with-service.html",
            "relUrl": "/systemd/automation/2020/06/01/automatically-restart-docker-after-reboot-with-service.html",
            "date": " • Jun 1, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Contact",
          "content": "Howapped is a software consultancy from London, UK. . howapped words covers project updates and my learnings from the Howapped labs 1. . I help SAAS companies retain larger, more valuable subscribers. . Please contact for project and mentoring opportunities words@howapped.com . This website is powered by fastpages . not really a lab with test tubes and stuff. &#8617; . |",
          "url": "https://words.howapped.com/contact/",
          "relUrl": "/contact/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://words.howapped.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}