{
  
    
        "post0": {
            "title": "hello world serverless microservice",
            "content": "Problem . We&#39;ve been asked for an API that will work at web scale and be cost effective. A serverless API is perfect for this. . What are the constituent parts needed to start working with the AWS SDK with Python and steps needed to write and execute a serverless script with AWS Lambda. How can this script be invoked by an HTTP endpoint? . Solution . The companion repo consists utility code for deploying the lambda with boto3 as well as detail on the AWS API Gateway service that provides an endpoint to invoke the serverless function. . This is the end product; A serverless endpoint. . . The code can be found on Github.. . Once cloned, install dependencies, set your AWS account ID as an environment variable and run it. . (venv) (base) $ python src/main.py ✅ Remove existing named lambda/api ✅ Create the lambda ✅ Deploy the lambda ✅ Remove any existing API ✅ Create API ✅ Deploy API ✅ Test API SERVERLESS ENDPOINT RESPONSE from https://qvaik2un06.execute-api.eu-west-2.amazonaws.com/hello-world : b&#39;{&quot;querystring_params:&quot;: {}, &quot;err&quot;: null, &quot;message&quot;: &quot;Hello Serverless World&quot;}&#39; . Setup: Creating the Lambda function and deploying . Python module structure . Like this . lambdapi ├── src │ ├── __init__.py │ ├── settings.py # constants like AWS account │ ├── main.py # run me for instant results | └─── python_lambdas | | └─── hello_world.py # serverless python function │ ├── api_gateway.py # boto3 for api_gateway │ ├── lambda_functions.py # boto3 lambda │ └── helpers.py # file operations └── ... . AWS Permissions with IAM . IAM Resources used - policies and roles. . IAM Policies define the effect, actions, resources and optional conditions in a JSON document. . An IAM user is a person or service that interacts with AWS with their own access to the management console. A user can have a policy attached to them. In this case it is more appropriate to grant policy access with an IAM role. When assuming an IAM role (see Trusted Entity), access to a service can be granted to a user without having to give them new keys as the user can use temporary security tokens. . Create an IAM Lambda access policy for IAM using an IAM client that you create. . The access definition is provided in an s3_access_policy_document . JSON dictionary | Action key Statement with all S3 permissions | Cloudwatch to create log groups and streams for monitoring of the lamdba events | . | . After creating a policy, create role and attach it to an execution role by assuming the role. . Verifying the Lambda was created on AWS Console . By way of sanity check, we can verify the Lambda function has been uploaded in the AWS Console. . For the appropriate region, you may see the function, memory, timeout and our chosen permissions. . . . Resources used: with thanks &#128154; . Niyazi Erdogan&#39;s O&#39;Reilly course - Build and Deploy Lambda functions AWS and Python Videos . | Building Lambda Functions with Python AWS docs . | boto3 AWS Python SDK lambda docs | AWS Lambda Execution role | Using AWS Lambda with Amazon API Gateway AWS Tutorial | Setting up API Gateway and integrating it with Lambda proxy in Richard T. Freeman&#39;s serverless microservice course O&#39;Reilly Videos | .",
            "url": "https://words.howapped.com/aws%20lambda/boto3/python/aws%20api%20gateway/2020/07/01/serverless-endpoint-with-aws-lambda-api-gateway-and-boto3.html",
            "relUrl": "/aws%20lambda/boto3/python/aws%20api%20gateway/2020/07/01/serverless-endpoint-with-aws-lambda-api-gateway-and-boto3.html",
            "date": " • Jul 1, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Scheduled Severless Startup",
            "content": "The Problem . As part of the Covid-19 effort, Digital Ocean donated some free credit to us to work on a local food delivery scheme. . To make that credit go as far as possible and to minimise power consumption, we&#39;d like to power up and down the servers according to a schedule. . The Solution . Esimated cost saving... . Here&#39;s how to do that with AWS Lambda, with cloudfront events. We iterate on that to use the Serverless Framework. . TLDR; Have a look at the companion repo.. It contains an example dockerized web app and the shell scripts for starting containers and creating the service. . This article covers how to automate with a Digital Ocean droplet so to follow along with the code, you can create one using the example from a previous article. . We will examine the cURL statements, convert those into Python. We can use AWS Lambda to execute the Python in a serverless environment. Then, the AWS lambda functions can be triggered by Cloudwatch events to a schedule so machines can be brought online only during operating hours. . We can notify any interested parties using Microsoft Teams - a topic for a subsequent post. . Prerequisites . You can always check the companion repo. . You will need to: . .. have jq installed to format JSON responses Download JQ for your OS | . | . .. have a server on which a dockerized web app will start automatically when the server is restarted See previous article on how to create one with DigitalOcean. | . | . .. have installed Boto3 with your AWS account credentials so we can work with the AWS Python SDK. | . cURL statements to boot down and up . As covered in a previous post, our web app will restart when rebooted using a systemd service. . Rather than ssh or the cloud provider&#39;s control panel, the server can be started and stopped using cURL. . In the case of DigitalOcean: . Find out the ID of the server: . $ curl -H &#39;Content-Type: application/json&#39; -H &#39;Authorization: Bearer &#39;$DIGITAL_OCEAN_ACCESS_TOKEN&#39;&#39; &quot;https://api.digitalocean.com/v2/droplets?name=scheduled-serverless&quot; | jq &#39;.droplets[] | {id:.id, name:.name, status: .status}&#39; . The output gives us the ID . { ... }, { &quot;id&quot;: 195786885, &quot;name&quot;: &quot;scheduled-serverless&quot;, &quot;status&quot;: &quot;active&quot; } . And then power it down: . $ curl -X POST -H &#39;Content-Type: application/json&#39; -H &#39;Authorization: Bearer &#39;$DIGITAL_OCEAN_ACCESS_TOKEN&#39;&#39; -d &#39;{&quot;type&quot;:&quot;power_off&quot;}&#39; &quot;https://api.digitalocean.com/v2/droplets/195786885/actions&quot; | jq &#39;.[] | {id:.id, status:.status, type:.type}&#39; . Which tells us it&#39;s in progress . { &quot;id&quot;: 955320153, &quot;status&quot;: &quot;in-progress&quot;, &quot;type&quot;: &quot;power_off&quot; } . The equivalent cURL for powering on the server is virtual identical . $ curl -X POST -H &#39;Content-Type: application/json&#39; -H &#39;Authorization: Bearer &#39;$DIGITAL_OCEAN_ACCESS_TOKEN&#39;&#39; -d &#39;{&quot;type&quot;:&quot;power_on&quot;}&#39; &quot;https://api.digitalocean.com/v2/droplets/195786885/actions&quot; | jq &#39;.[] | {id:.id, status:.status, type:.type}&#39; . The web app from the example is running on port 80. We know the server&#39;s IP address by referring to the control panel. Let&#39;s confirm that the service is running by verifying the output in a browser. . . Requests scripts in AWS Lambda . The cURL statements in Python . First, get the ID of the droplet. . import os import sys import requests TOKEN = os.getenv(&#39;DIGITAL_OCEAN_ACCESS_TOKEN&#39;,&#39;&#39;) DROPLET_NAME = &#39;scheduled-serverless&#39; headers = { &#39;Content-Type&#39;: &#39;application/json&#39;, &#39;Authorization&#39;: f&#39;Bearer {TOKEN}&#39;, } if TOKEN == &#39;&#39;: sys.exit(&#39;Your environment should have the `DIGITAL_OCEAN_ACCESS_TOKEN exported.&#39;) def get_droplet(): response = requests.get(&#39;https://api.digitalocean.com/v2/droplets&#39;, headers=headers, params={}) return [d for d in response.json().get(&#39;droplets&#39;,{}) if d.get(&#39;name&#39;,&#39;&#39;) == DROPLET_NAME][0] DROPLET = get_droplet() print(f&#39;Droplet ID: {DROPLET.get(&quot;id&quot;)}&#39;) . Droplet ID: 195786885 . Now we have the ID, let&#39;s define the functions for bringing the servers down and back up. . def power_off() -&gt; dict: data = &#39;{&quot;type&quot;:&quot;power_off&quot;}&#39; url = f&#39;https://api.digitalocean.com/v2/droplets/{DROPLET.get(&quot;id&quot;)}/actions&#39; response = requests.post(url, headers=headers, data=data) return response.json() def power_on() -&gt; dict: data = &#39;{&quot;type&quot;:&quot;power_on&quot;}&#39; url = f&#39;https://api.digitalocean.com/v2/droplets/{DROPLET.get(&quot;id&quot;)}/actions&#39; response = requests.post(url, headers=headers, data=data) return response.json() action_resp = power_off() print(action_resp[&#39;action&#39;][&#39;type&#39;]) print(action_resp[&#39;action&#39;][&#39;status&#39;]) print(&#39;-&#39;) # action_resp = power_on() # print(action_resp[&#39;action&#39;][&#39;type&#39;]) # print(action_resp[&#39;action&#39;][&#39;status&#39;]) . power_off in-progress - . Running the scripts in AWS Lambda . Let&#39;s translate the cURL statements into Python. . Schedule the scripts with Cloudwatch events . Serverless framework . Quality of Life enhancements . When the target service is unavailable, it&#39;s quite unfriendly to show a blank 500 screen. A subsequent post outlines a solution for a forwarding service which can display an Open/Closed for business page to the user, with &#39;Opening times&#39; . As part of what&#39;s become known as &#39;Chatops&#39;, it&#39;s useful to update team members and stakeholders about the status of the server. A future addition will be to use the Microsoft Teams API to notify interested parties. . Resources . Curl converter - [github] . convert curl commands to Python, JavaScript, PHP, R, Go, Rust, Dart, JSON, Ansible, Elixir . | .",
            "url": "https://words.howapped.com/aws%20lambda/automation/python/2020/06/11/scheduled-serverless-startup.html",
            "relUrl": "/aws%20lambda/automation/python/2020/06/11/scheduled-serverless-startup.html",
            "date": " • Jun 11, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Automatically restart docker containers after reboot",
            "content": "The Problem . As part of Covid-19 relief, DigitalOcean donated some free credit for me to work on a local food delivery scheme. . I need to get most value for money by making that credit go as far as possible. It would also be nice to minimise power consumption. . The Solution . The server should be powered-down outside of operating hours and turned back on before start of business. This can be done using the cloud provider&#39;s control panel. . To avoid manual work starting the web app, a service is needed to bring the containers back online when the droplet is swtiched on. . Covered in this article is the process for using the DigitalOcean API to create a droplet with the requisite user_data for creating the systemd service to start containers at boot time. . TLDR; Have a look at the companion repo.. It contains an example dockerized web app and the shell scripts for starting containers and creating the service. . Not covered in this article is the process to automate the power down and up to a schedule. This is covered in a subsequent article. . Prerequisites . A Digital Ocean account (free trial available) | Generate an access token for accessing the DigitalOcean API | Add the token to your environment . $ export DIGITAL_OCEAN_ACCESS_TOKEN=XXXXXXXX . | jq installed to format JSON responses Download JQ for your OS | . | . Create a DigitalOcean droplet (optional) . If you already have a web server, with an app, move to section, &#39;Create a systemd service.&#39; . If you do not already have a web server, launch a Droplet with requisite SSH access. . cURL to create the droplet . This cURL statement creates an Ubuntu 18.04 server in London. The user_data key in the payload is used for defining various statements to execute once the server is created. In this case we are cloning the repo containing the dockerized app, starting it, and creating the systemd service to restart the app when the server boots up. . $ curl -X POST -H &#39;Content-Type: application/json&#39; -H &#39;Authorization: Bearer &#39;$DIGITAL_OCEAN_ACCESS_TOKEN&#39;&#39; -d &#39;{&quot;name&quot;:&quot;scheduled-serverless&quot;,&quot;region&quot;:&quot;lon1&quot;,&quot;size&quot;:&quot;s-2vcpu-4gb&quot;,&quot;image&quot;:&quot;docker-18-04&quot;, &quot;user_data&quot;: &quot;#!/bin/bash apt-get update apt-get upgrade -y git clone https://github.com/jonwhittlestone/scheduled-serverless-startup.git /root/scheduled-serverless-startup sh /root/scheduled-serverless-startup/start-containers.sh sh /root/scheduled-serverless-startup/create-service.sh&quot;}&#39; &quot;https://api.digitalocean.com/v2/droplets&quot; . SSH into your new droplet . You will be emailed your root password. After you SSH in using the provided password, you will be asked to change it. . . Test the web app is running . The app is running with Docker on port 80, so it&#39;s simply a case of: . root@scheduled-serverless:~# curl localhost A Howapped Project. . Test the service is running . Restart your server with . root@scheduled-serverless:~# sudo reboot . And then ssh and repeat the cURL statement to the web service . (base) ➜ ~ ssh root@167.172.56.239 curl localhost root@167.172.56.239&#39;s password: % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 A Howapped Project. 100 22 100 22 0 0 1294 0 --:--:-- --:--:-- --:--:-- 1294 . Create a systemd service . Ubuntu&#39;s init system is called systemd and various flavours of Linux may have differing init systems. . Scripting the starting of the web app . We need to define what should be automated which is starting the containers. . In this case, I have an example dockerized app defined in the companion repo, so let&#39;s clone that. . If this directory is present (because it has been previously cloned), then just pull the latest changes. . #!/bin/bash if [ -d &quot;/root/scheduled-serverless-startup&quot; ] then git pull origin master else cd /root/scheduled-serverless-startup git clone https://github.com/jonwhittlestone/scheduled-serverless-startup.git /root/scheduled-serverless-startup fi cd /root/scheduled-serverless-startup/app docker-compose up -d . Lastly, we start containers with docker-compose . Using systemctl to enable the service . Using the interface systemctl we can manage the init system. Each service is called a unit file. This means loading a service, enabling at boot and restarting. . On an Ubuntu system, you may inspect the running services: . $ systemctl status | head ● madebyjon State: running Jobs: 0 queued Failed: 0 units Since: Mon 2020-06-08 05:56:42 BST; 1 day 2h ago CGroup: / ├─3770 bpfilter_umh ├─user.slice │ └─user-1000.slice │ ├─user@1000.service . The following shell script creates the unit file, enables it at boot and starts the service. . #!/bin/bash touch /etc/systemd/system/howapped.service cat &gt; /etc/systemd/system/howapped.service&lt;&lt;-EOF [Unit] Description=HowappedProjectStartOnBoot After=network.target [Service] Type=simple User=root WorkingDirectory=/root/scheduled-serverless-startup ExecStart=/bin/sh /root/scheduled-serverless-startup/start-containers.sh Restart=on-abort [Install] WantedBy=multi-user.target EOF systemctl daemon-reload systemctl enable howapped.service systemctl restart howapped.service . Enable the systemd service . The below excerpt verifies we have the working directory created. . root@scheduled-serverless:~/scheduled-serverless-startup# ls README.md app create-service.sh Vagrantfile cloud-config.yaml start-containers.sh root@scheduled-serverless:~/scheduled-serverless-startup# pwd /root/scheduled-serverless-startup . And this runs the shell script to create the unit file and enable it. . root@scheduled-serverless:~/scheduled-serverless-startup# sh create-service.sh Created symlink /etc/systemd/system/multi-user.target.wants/howapped.service → /etc/systemd/system/howapped.service. . Test it . We will use the CURL statement to find the ID of our droplet, so that we can then use a CURL statement to power down the machine. . $ curl -H &#39;Content-Type: application/json&#39; -H &#39;Authorization: Bearer &#39;$DIGITAL_OCEAN_ACCESS_TOKEN&#39;&#39; &quot;https://api.digitalocean.com/v2/droplets?name=scheduled-serverless&quot; | jq &#39;.droplets[] | {id:.id, name:.name, status: .status}&#39; { &quot;id&quot;: 195393249, &quot;name&quot;: &quot;scheduled-serverless&quot;, &quot;status&quot;: &quot;on&quot; } # power it down $ curl -X POST -H &#39;Content-Type: application/json&#39; -H &#39;Authorization: Bearer &#39;$DIGITAL_OCEAN_ACCESS_TOKEN&#39;&#39; -d &#39;{&quot;type&quot;:&quot;power_off&quot;}&#39; &quot;https://api.digitalocean.com/v2/droplets/195393249/actions&quot; | jq &#39;.[] | {id:.id, status:.status, type:.type}&#39; . We power it back up: . $ curl -X POST -H &#39;Content-Type: application/json&#39; -H &#39;Authorization: Bearer &#39;$DIGITAL_OCEAN_ACCESS_TOKEN&#39;&#39; -d &#39;{&quot;type&quot;:&quot;power_on&quot;}&#39; &quot;https://api.digitalocean.com/v2/droplets/195393249/actions&quot; | jq &#39;.[] | {id:.id, status:.status, type:.type}&#39; { &quot;id&quot;: 953153688, &quot;status&quot;: &quot;in-progress&quot;, &quot;type&quot;: &quot;power_on&quot; } . And verify our app is running. . $ ssh root@104.248.174.117 curl localhost root@104.248.174.117&#39;s password: % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 A Howapped Project. . Clean up . If you were following along by creating a DigitalOcean droplet, you may wish to power down or destroy the machine if not in use. . . Resources . Linode - Introduction to Systemctl | .",
            "url": "https://words.howapped.com/systemd/automation/2020/06/01/automatically-restart-docker-after-reboot-with-service.html",
            "relUrl": "/systemd/automation/2020/06/01/automatically-restart-docker-after-reboot-with-service.html",
            "date": " • Jun 1, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Contact",
          "content": "Howapped is a software consultancy from London, UK. . howapped words covers project updates and my learnings from the Howapped labs 1. . I help SAAS companies retain larger, more valuable subscribers. . Please contact for project or mentorship opportunities words@howapped.com . This website is powered by fastpages . not really a lab with test tubes and stuff. &#8617; . |",
          "url": "https://words.howapped.com/contact/",
          "relUrl": "/contact/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://words.howapped.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}