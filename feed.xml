<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://words.howapped.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://words.howapped.com/" rel="alternate" type="text/html" /><updated>2020-06-12T00:36:13-05:00</updated><id>https://words.howapped.com/feed.xml</id><title type="html">howapped words</title><subtitle>Learnings and updates from the Howapped labs.</subtitle><entry><title type="html">Automatically restart docker containers after reboot</title><link href="https://words.howapped.com/systemd/automation/2020/06/01/automatically-restart-docker-after-reboot-with-service.html" rel="alternate" type="text/html" title="Automatically restart docker containers after reboot" /><published>2020-06-01T00:00:00-05:00</published><updated>2020-06-01T00:00:00-05:00</updated><id>https://words.howapped.com/systemd/automation/2020/06/01/automatically-restart-docker-after-reboot-with-service</id><content type="html" xml:base="https://words.howapped.com/systemd/automation/2020/06/01/automatically-restart-docker-after-reboot-with-service.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-06-01-automatically-restart-docker-after-reboot-with-service.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;The-Problem&quot;&gt;The Problem&lt;a class=&quot;anchor-link&quot; href=&quot;#The-Problem&quot;&gt; &lt;/a&gt;&lt;/h1&gt;&lt;p&gt;As part of Covid-19 relief, DigitalOcean donated some free credit for me to work on a local food delivery scheme.&lt;/p&gt;
&lt;p&gt;I need to get most value for money by making that credit go as far as possible. It would also be nice to minimise power consumption.&lt;/p&gt;
&lt;h1 id=&quot;The-Solution&quot;&gt;The Solution&lt;a class=&quot;anchor-link&quot; href=&quot;#The-Solution&quot;&gt; &lt;/a&gt;&lt;/h1&gt;&lt;p&gt;The server should be powered-down outside of operating hours and turned back on before start of business. This can be done using the cloud provider's control panel.&lt;/p&gt;
&lt;p&gt;To avoid manual work starting the web app, a service is needed to bring the containers back online when the droplet is swtiched on.&lt;/p&gt;
&lt;p&gt;Covered in this article is the process for using the DigitalOcean API to create a droplet with the requisite &lt;code&gt;user_data&lt;/code&gt; for creating the &lt;code&gt;systemd&lt;/code&gt; service to start containers at boot time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TLDR; Have a look at the &lt;a href=&quot;https://github.com/jonwhittlestone/scheduled-serverless-startup&quot;&gt;companion repo.&lt;/a&gt;. It contains an example dockerized web app and the shell scripts for starting containers and creating the service.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Not covered in this article is the process to automate the power down and up to a schedule. This is covered in a subsequent article.&lt;/p&gt;
&lt;h2 id=&quot;Prerequisites&quot;&gt;Prerequisites&lt;a class=&quot;anchor-link&quot; href=&quot;#Prerequisites&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;A Digital Ocean account (free trial available)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/docs/apis-clis/api/&quot;&gt;Generate an access token&lt;/a&gt; for accessing the DigitalOcean API&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the token to your environment&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ export DIGITAL_OCEAN_ACCESS_TOKEN=XXXXXXXX&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jq&lt;/code&gt; installed to format JSON responses&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://stedolan.github.io/jq/download/&quot;&gt;Download JQ&lt;/a&gt; for your OS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Create-a-DigitalOcean-droplet-(optional)&quot;&gt;Create a DigitalOcean droplet (optional)&lt;a class=&quot;anchor-link&quot; href=&quot;#Create-a-DigitalOcean-droplet-(optional)&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you already have a web server, with an app, move to section, &lt;a href=&quot;#Create-a-systemd-service&quot;&gt;'Create a systemd service.'&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you do not already have a web server, launch a Droplet with requisite SSH access.&lt;/p&gt;
&lt;h3 id=&quot;cURL-to-create-the-droplet&quot;&gt;cURL to create the droplet&lt;a class=&quot;anchor-link&quot; href=&quot;#cURL-to-create-the-droplet&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This cURL statement creates an Ubuntu 18.04 server in London. The &lt;code&gt;user_data&lt;/code&gt; key in the payload is used for defining various statements to execute once the server is created. In this case we are cloning the &lt;a href=&quot;https://github.com/jonwhittlestone/scheduled-serverless-startup&quot;&gt;repo&lt;/a&gt; containing the dockerized app, starting it, and creating the systemd service to restart the app when the server boots up.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $ curl -X POST \
    -H 'Content-Type: application/json' \
    -H 'Authorization: Bearer '$DIGITAL_OCEAN_ACCESS_TOKEN'' \
    -d '{&quot;name&quot;:&quot;scheduled-serverless&quot;,&quot;region&quot;:&quot;lon1&quot;,&quot;size&quot;:&quot;s-2vcpu-4gb&quot;,&quot;image&quot;:&quot;docker-18-04&quot;, &quot;user_data&quot;:
    &quot;#!/bin/bash
    apt-get update
    apt-get upgrade -y
    git clone https://github.com/jonwhittlestone/scheduled-serverless-startup.git /root/scheduled-serverless-startup
    sh /root/scheduled-serverless-startup/start-containers.sh
    sh /root/scheduled-serverless-startup/create-service.sh&quot;}' \
    &quot;https://api.digitalocean.com/v2/droplets&quot; 

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;SSH-into-your-new-droplet&quot;&gt;SSH into your new droplet&lt;a class=&quot;anchor-link&quot; href=&quot;#SSH-into-your-new-droplet&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;You will be emailed your root password. 
After you SSH in using the provided password, you will be asked to change it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://words.howapped.com/images/copied_from_nb/email.png&quot; alt=&quot;email.png&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;Test-the-web-app-is-running&quot;&gt;Test the web app is running&lt;a class=&quot;anchor-link&quot; href=&quot;#Test-the-web-app-is-running&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The app is running with Docker on port 80, so it's simply a case of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@scheduled-serverless:~# curl localhost

A Howapped Project.

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;Test-the-service-is-running&quot;&gt;Test the service is running&lt;a class=&quot;anchor-link&quot; href=&quot;#Test-the-service-is-running&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Restart your server with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@scheduled-serverless:~# sudo reboot

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then ssh and repeat the cURL statement to the web service&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(base) ➜  ~ ssh root@167.172.56.239 curl localhost
root@167.172.56.239's password: 
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                             Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
A Howapped Project.

100    22  100    22    0     0   1294      0 --:--:-- --:--:-- --:--:--  1294&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Create-a-systemd-service&quot;&gt;Create a systemd service&lt;a class=&quot;anchor-link&quot; href=&quot;#Create-a-systemd-service&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Ubuntu's init system is called &lt;code&gt;systemd&lt;/code&gt; and various flavours of Linux may have differing init systems.&lt;/p&gt;
&lt;h3 id=&quot;Scripting-the-starting-of-the-web-app&quot;&gt;Scripting the starting of the web app&lt;a class=&quot;anchor-link&quot; href=&quot;#Scripting-the-starting-of-the-web-app&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We need to define what should be automated which is starting the containers.&lt;/p&gt;
&lt;p&gt;In this case, I have an example dockerized app defined in the &lt;a href=&quot;https://github.com/jonwhittlestone/scheduled-serverless-startup&quot;&gt;companion repo&lt;/a&gt;, so let's clone that.&lt;/p&gt;
&lt;p&gt;If this directory is present (because it has been previously cloned), then just pull the latest changes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

if [ -d &quot;/root/scheduled-serverless-startup&quot; ] 
then
    git pull origin master
else
    cd /root/scheduled-serverless-startup
     git clone https://github.com/jonwhittlestone/scheduled-serverless-startup.git /root/scheduled-serverless-startup
fi
cd /root/scheduled-serverless-startup/app
docker-compose up -d&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lastly, we start containers with &lt;code&gt;docker-compose&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;Using-systemctl-to-enable-the-service&quot;&gt;Using &lt;code&gt;systemctl&lt;/code&gt; to enable the service&lt;a class=&quot;anchor-link&quot; href=&quot;#Using-systemctl-to-enable-the-service&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Using the interface &lt;code&gt;systemctl&lt;/code&gt; we can manage the init system. Each service is called a unit file. This means loading a service, &lt;a href=&quot;https://www.linode.com/docs/quick-answers/linux-essentials/introduction-to-systemctl/#enabling-a-service-at-boot&quot;&gt;enabling at boot&lt;/a&gt; and restarting.&lt;/p&gt;
&lt;p&gt;On an Ubuntu system, you may inspect the running services:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ systemctl status | head
● madebyjon
    State: running
     Jobs: 0 queued
   Failed: 0 units
    Since: Mon 2020-06-08 05:56:42 BST; 1 day 2h ago
   CGroup: /
           ├─3770 bpfilter_umh
           ├─user.slice
           │ └─user-1000.slice
           │   ├─user@1000.service&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following &lt;a href=&quot;https://github.com/jonwhittlestone/scheduled-serverless-startup/blob/master/create-service.sh&quot;&gt;shell script&lt;/a&gt; creates the unit file, enables it at boot and starts the service.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
touch /etc/systemd/system/howapped.service
cat &amp;gt; /etc/systemd/system/howapped.service&amp;lt;&amp;lt;-EOF
    [Unit]
    Description=HowappedProjectStartOnBoot
    After=network.target
    [Service]
    Type=simple
    User=root
    WorkingDirectory=/root/scheduled-serverless-startup
    ExecStart=/bin/sh /root/scheduled-serverless-startup/start-containers.sh
    Restart=on-abort
    [Install]
    WantedBy=multi-user.target
EOF
systemctl daemon-reload
systemctl enable howapped.service
systemctl restart howapped.service&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Enable-the-systemd-service&quot;&gt;Enable the systemd service&lt;a class=&quot;anchor-link&quot; href=&quot;#Enable-the-systemd-service&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The below excerpt verifies we have the working directory created.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@scheduled-serverless:~/scheduled-serverless-startup# ls
README.md    app                create-service.sh
Vagrantfile  cloud-config.yaml  start-containers.sh
root@scheduled-serverless:~/scheduled-serverless-startup# pwd
/root/scheduled-serverless-startup&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this runs the shell script to create the unit file and enable it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@scheduled-serverless:~/scheduled-serverless-startup# sh create-service.sh 
Created symlink /etc/systemd/system/multi-user.target.wants/howapped.service → /etc/systemd/system/howapped.service.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Test-it&quot;&gt;Test it&lt;a class=&quot;anchor-link&quot; href=&quot;#Test-it&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We will use the CURL statement to find the ID of our droplet, so that we can then use a CURL statement to power down the machine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl \
        -H 'Content-Type: application/json' \
        -H 'Authorization: Bearer '$DIGITAL_OCEAN_ACCESS_TOKEN'' \
    &quot;https://api.digitalocean.com/v2/droplets?name=scheduled-serverless&quot; | jq '.droplets[] | {id:.id, name:.name, status: .status}'

{
  &quot;id&quot;: 195393249,
  &quot;name&quot;: &quot;scheduled-serverless&quot;,
  &quot;status&quot;: &quot;on&quot;
}


# power it down
$ curl -X POST \
    -H 'Content-Type: application/json' \
    -H 'Authorization: Bearer '$DIGITAL_OCEAN_ACCESS_TOKEN'' \
    -d '{&quot;type&quot;:&quot;power_off&quot;}' \
    &quot;https://api.digitalocean.com/v2/droplets/195393249/actions&quot; | jq '.[] | {id:.id, status:.status, type:.type}'&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We power it back up:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -X POST \
    -H 'Content-Type: application/json' \
    -H 'Authorization: Bearer '$DIGITAL_OCEAN_ACCESS_TOKEN'' \
    -d '{&quot;type&quot;:&quot;power_on&quot;}' \
    &quot;https://api.digitalocean.com/v2/droplets/195393249/actions&quot; | jq '.[] | {id:.id, status:.status, type:.type}'

{
  &quot;id&quot;: 953153688,
  &quot;status&quot;: &quot;in-progress&quot;,
  &quot;type&quot;: &quot;power_on&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And verify our app is running.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh root@104.248.174.117 curl localhost
root@104.248.174.117's password: 
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
A Howapped Project.&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Clean-up&quot;&gt;Clean up&lt;a class=&quot;anchor-link&quot; href=&quot;#Clean-up&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you were following along by creating a DigitalOcean droplet, you may wish to power down or destroy the machine if not in use.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://words.howapped.com/images/copied_from_nb/destroy.png&quot; alt=&quot;destroy.png&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Resources&quot;&gt;Resources&lt;a class=&quot;anchor-link&quot; href=&quot;#Resources&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.linode.com/docs/quick-answers/linux-essentials/introduction-to-systemctl/&quot;&gt;Linode - Introduction to Systemctl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://words.howapped.com/images/on.png" /><media:content medium="image" url="https://words.howapped.com/images/on.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Scheduled Severless Startup</title><link href="https://words.howapped.com/aws%20lambda/automation/python/2020/06/01/scheduled-serverless-startup.html" rel="alternate" type="text/html" title="Scheduled Severless Startup" /><published>2020-06-01T00:00:00-05:00</published><updated>2020-06-01T00:00:00-05:00</updated><id>https://words.howapped.com/aws%20lambda/automation/python/2020/06/01/scheduled-serverless-startup</id><content type="html" xml:base="https://words.howapped.com/aws%20lambda/automation/python/2020/06/01/scheduled-serverless-startup.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-06-01-scheduled-serverless-startup.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;The-Problem&quot;&gt;The Problem&lt;a class=&quot;anchor-link&quot; href=&quot;#The-Problem&quot;&gt; &lt;/a&gt;&lt;/h1&gt;&lt;p&gt;As part of the Covid-19 effort, Digital Ocean donated some free credit to us to work on a local food delivery scheme.&lt;/p&gt;
&lt;p&gt;To make that credit go as far as possible and to minimise power consumption, we'd like to power up and down the servers according to a schedule.&lt;/p&gt;
&lt;h1 id=&quot;The-Solution&quot;&gt;The Solution&lt;a class=&quot;anchor-link&quot; href=&quot;#The-Solution&quot;&gt; &lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Esimated cost saving...&lt;/p&gt;
&lt;p&gt;Here's how to do that with AWS Lambda, with cloudfront events. We iterate on that to use the Serverless Framework.&lt;/p&gt;
&lt;h2 id=&quot;Prerequisites&quot;&gt;Prerequisites&lt;a class=&quot;anchor-link&quot; href=&quot;#Prerequisites&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To follow along, there is a bit of set up involved to launch a Droplet that you can inspect with SSH if you need.&lt;/p&gt;
&lt;p&gt;You could always just check the &lt;a href=&quot;https://github.com/jonwhittlestone/scheduled-serverless-startup&quot;&gt;companion repo.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You will need to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.. have &lt;code&gt;jq&lt;/code&gt; installed to format JSON responses&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://stedolan.github.io/jq/download/&quot;&gt;Download JQ&lt;/a&gt; for your OS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;.. &lt;a href=&quot;https://www.digitalocean.com/docs/apis-clis/api/&quot;&gt;generate&lt;/a&gt; an access token so you can use the Digital Ocean API.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;.. add the access token to your environment&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ export DIGITAL_OCEAN_ACCESS_TOKEN=[your_digital_ocean_token]&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;.. have a &lt;a href=&quot;https://www.digitalocean.com/docs/droplets/quickstart/#create-droplets&quot;&gt;running Digital Ocean Droplet&lt;/a&gt; with Docker installed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you need to create one, use the following &lt;a href=&quot;https://developers.digitalocean.com/documentation/v2/#create-a-new-droplet&quot;&gt;API operation&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $ curl -X POST \
  -H 'Content-Type: application/json' \
  -H 'Authorization: Bearer '$DIGITAL_OCEAN_ACCESS_TOKEN'' \
  -d '{&quot;name&quot;:&quot;scheduled-serverless&quot;,&quot;region&quot;:&quot;lon1&quot;,&quot;size&quot;:&quot;s-2vcpu-4gb&quot;,&quot;image&quot;:&quot;docker-18-04&quot;}' \
  &quot;https://api.digitalocean.com/v2/droplets&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;.. &lt;a href=&quot;https://8gwifi.org/sshfunctions.jsp&quot;&gt;generate&lt;/a&gt; and add the private key to your droplet. When generating, Select: &lt;code&gt;RSA&lt;/code&gt; and &lt;code&gt;4096&lt;/code&gt; and leave &lt;code&gt;Passphrase&lt;/code&gt; blank. You may use the following API operation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;.. add the public key to your environment&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Shutdown-a-Droplet-with-CURL&quot;&gt;Shutdown a Droplet with CURL&lt;a class=&quot;anchor-link&quot; href=&quot;#Shutdown-a-Droplet-with-CURL&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Assuming, your account only has one Digital Ocean droplet, the following CURL statement shows &lt;code&gt;active&lt;/code&gt; status and the ID&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl \
    -H 'Content-Type: application/json' \
    -H 'Authorization: Bearer '$DIGITAL_OCEAN_ACCESS_TOKEN'' \
    &quot;https://api.digitalocean.com/v2/droplets?name=scheduled-serverless&quot; | jq '.droplets[0].status, .droplets[1].id'
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  4137    0  4137    0     0   7925      0 --:--:-- --:--:-- --:--:--  7940
&quot;active&quot;
194534673



&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Issuing the following &lt;a href=&quot;https://developers.digitalocean.com/documentation/v2/#shutdown-a-droplet&quot;&gt;CURL will&lt;/a&gt; shut it down.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -X POST \
-H 'Content-Type: application/json' \
-H 'Authorization: Bearer '$DIGITAL_OCEAN_ACCESS_TOKEN'' \
-d '{&quot;type&quot;:&quot;shutdown&quot;}' \
&quot;https://api.digitalocean.com/v2/droplets/194534673/actions&quot;


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then verify  the droplet has been powered down by reissuing the previous command from above. to show the 'active' status.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
&quot;off&quot;
194534673&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Power-on-a-Droplet-with-CURL&quot;&gt;Power on a Droplet with CURL&lt;a class=&quot;anchor-link&quot; href=&quot;#Power-on-a-Droplet-with-CURL&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The action for powering on follows the same convention.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -X POST \
    -H 'Content-Type: application/json' \
    -H 'Authorization: Bearer '$DIGITAL_OCEAN_ACCESS_TOKEN'' \
    -d '{&quot;type&quot;:&quot;power_on&quot;}' \
    &quot;https://api.digitalocean.com/v2/droplets/194534673/actions&quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can check the machine has been powered down:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl \
        -H 'Content-Type: application/json' \
        -H 'Authorization: Bearer '$DIGITAL_OCEAN_ACCESS_TOKEN'' \
    &quot;https://api.digitalocean.com/v2/droplets?name=scheduled-serverless&quot; | jq '.droplets[] | {id:.id, name:.name,status: .status}'&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Requests-scripts-in-AWS-Lambda&quot;&gt;Requests scripts in AWS Lambda&lt;a class=&quot;anchor-link&quot; href=&quot;#Requests-scripts-in-AWS-Lambda&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;First lets translate these CURL statements into Python.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#     &amp;#39;Authorization&amp;#39;: &amp;#39;Bearer $DIGITAL_OCEAN_ACCESS_TOKEN&amp;#39;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Authorization&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Bearer XXX&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;page&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;per_page&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;100&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;https://api.digitalocean.com/v2/droplets&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


 
&lt;span class=&quot;c1&quot;&gt;#data = &amp;#39;{&amp;quot;type&amp;quot;:&amp;quot;shutdown&amp;quot;}&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#response = requests.post(&amp;#39;https://api.digitalocean.com/v2/droplets/194534673/actions&amp;#39;, headers=headers, data=data)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;&amp;lt;Response [401]&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Schedule-the-scripts-with-Cloudwatch-events&quot;&gt;Schedule the scripts with Cloudwatch events&lt;a class=&quot;anchor-link&quot; href=&quot;#Schedule-the-scripts-with-Cloudwatch-events&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Serverless-framework&quot;&gt;Serverless framework&lt;a class=&quot;anchor-link&quot; href=&quot;#Serverless-framework&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Team-notifications-with-Slack&quot;&gt;Team notifications with Slack&lt;a class=&quot;anchor-link&quot; href=&quot;#Team-notifications-with-Slack&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As part of what's become known as 'Chatops', it's useful to update team members and stakeholders about the status of the server.&lt;/p&gt;
&lt;p&gt;There are a variety of messaging platforms that have APIs such as Telegram or even SMS, but Slack has become one of the most popular.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://words.howapped.com/images/chart-preview.png" /><media:content medium="image" url="https://words.howapped.com/images/chart-preview.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>